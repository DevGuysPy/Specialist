"""empty message

Revision ID: 239351ce2240
Revises: 74b71482b7e8
Create Date: 2016-01-06 18:08:28.039873

"""

# revision identifiers, used by Alembic.
revision = '239351ce2240'
down_revision = '74b71482b7e8'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils
from main.models import UserOrgActivity

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=256), nullable=False),
    sa.Column('first_name', sa.String(length=256), nullable=True),
    sa.Column('last_name', sa.String(length=256), nullable=True),
    sa.Column('phone', sa.String(length=12), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('photo', sa.String(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('registration_time', sa.DateTime(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('photo')
    )
    op.create_table('org_org_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_org_id', sa.Integer(), nullable=False),
    sa.Column('to_org_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('created_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['from_org_id'], ['company.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
    sa.ForeignKeyConstraint(['to_org_id'], ['company.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_org_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('customer', sqlalchemy_utils.types.choice.ChoiceType(
        UserOrgActivity.ACTIVITY_TYPE), nullable=True),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('created_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['company.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_user_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_user_id', sa.Integer(), nullable=False),
    sa.Column('to_user_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('start', sa.DateTime(), nullable=True),
    sa.Column('end', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('specialist_rating', sa.Integer(), nullable=True),
    sa.Column('customer_rating', sa.Integer(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('created_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['from_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
    sa.ForeignKeyConstraint(['to_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('service_activity')
    op.drop_table('customer')
    op.add_column(u'specialist', sa.Column('org_id', sa.Integer(), nullable=True))
    op.add_column(u'specialist', sa.Column('user_id', sa.Integer(), nullable=True))
    op.drop_constraint(u'specialist_email_key', 'specialist', type_='unique')
    op.drop_constraint(u'specialist_photo_key', 'specialist', type_='unique')
    op.drop_constraint(u'specialist_location_id_fkey', 'specialist', type_='foreignkey')
    op.drop_constraint(u'specialist_company_id_fkey', 'specialist', type_='foreignkey')
    op.create_foreign_key(None, 'specialist', 'user', ['user_id'], ['id'])
    op.create_foreign_key(None, 'specialist', 'company', ['org_id'], ['id'])
    op.drop_column(u'specialist', 'name')
    op.drop_column(u'specialist', 'registration_time')
    op.drop_column(u'specialist', 'photo')
    op.drop_column(u'specialist', 'company_id')
    op.drop_column(u'specialist', 'phone')
    op.drop_column(u'specialist', 'location_id')
    op.drop_column(u'specialist', 'email')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(u'specialist', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(u'specialist', sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column(u'specialist', sa.Column('phone', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.add_column(u'specialist', sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column(u'specialist', sa.Column('photo', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(u'specialist', sa.Column('registration_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column(u'specialist', sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'specialist', type_='foreignkey')
    op.drop_constraint(None, 'specialist', type_='foreignkey')
    op.create_foreign_key(u'specialist_company_id_fkey', 'specialist', 'company', ['company_id'], ['id'])
    op.create_foreign_key(u'specialist_location_id_fkey', 'specialist', 'location', ['location_id'], ['id'])
    op.create_unique_constraint(u'specialist_photo_key', 'specialist', ['photo'])
    op.create_unique_constraint(u'specialist_email_key', 'specialist', ['email'])
    op.drop_column(u'specialist', 'user_id')
    op.drop_column(u'specialist', 'org_id')
    op.create_table('customer',
    sa.Column('id', sa.INTEGER(), server_default=sa.text(u"nextval('customer_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('photo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('registration_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['location_id'], [u'location.id'], name=u'customer_location_id_fkey'),
    sa.PrimaryKeyConstraint('id', name=u'customer_pkey'),
    sa.UniqueConstraint('email', name=u'customer_email_key'),
    sa.UniqueConstraint('photo', name=u'customer_photo_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_activity',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('specialist_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('specialist_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], [u'customer.id'], name=u'service_activity_customer_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], [u'service.id'], name=u'service_activity_service_id_fkey'),
    sa.ForeignKeyConstraint(['specialist_id'], [u'specialist.id'], name=u'service_activity_specialist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name=u'service_activity_pkey')
    )
    op.drop_table('user_user_activity')
    op.drop_table('user_org_activity')
    op.drop_table('org_org_activity')
    op.drop_table('user')
    ### end Alembic commands ###
